using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using BlazorPathHelper.CodeBuilders;
using BlazorPathHelper.Models;
using BlazorPathHelper.Utils;
using Microsoft.CodeAnalysis;

#pragma warning disable CS1591

namespace BlazorPathHelper;

[Generator]
public class BlazorPathHelperSourceGenerator : IIncrementalGenerator
{
    // ReSharper disable once InconsistentNaming
    private static readonly string NL = RoslynGeneratorUtilities.GetNewLine();

    // Initialize is called at startup to configure the generator
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // parse .razor files
        // The pages to be generated may not exist when the source generator is running
        // (The timing of execution is simultaneous and cannot interfere with each other )
        // Therefore, when the source generator is executed, it is necessary to obtain information directly from the .razor file
        // ref: https://github.com/dotnet/roslyn/issues/57239
        var razorFileStructures = ParseRazorStructureFactory.ParseRazorFiles(context);

        // extract BlazorPathAttribute and combine with razorFileStructures
        var sourceRoot = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                "BlazorPathHelper.BlazorPathAttribute",
                static (_, _) => true,
                static (context, _) => context)
            .Combine(razorFileStructures);

        // register source output
        context.RegisterSourceOutput(sourceRoot, EmitPathRoot);
    }

    private static void EmitPathRoot(
        SourceProductionContext context,
        (GeneratorAttributeSyntaxContext source, ImmutableArray<ParseRazorStructure> structures) pairs)
    {
        var (source, structures) = pairs;
        var symbol = (INamedTypeSymbol)source.TargetSymbol;
        var parseRecords = ParseRecordFactory.GenerateRecordsFromPathAttr(symbol);
        var treeStructures = ParseRecordTreeStructureFactory.Create(parseRecords);
        ExportBuilderCode(context, parseRecords);
        ExportMenuStructureCode(context, treeStructures);
        ExportRazorClassCode(context, parseRecords, structures);
    }

    private static void ExportBuilderCode(SourceProductionContext context, List<ParseRecord> records)
    {
        var no = 0;
        var recordsGroupBy = records.GroupBy(r => new { r.ExportClassName, r.Namespace });
        foreach (var recordsOfCls in recordsGroupBy)
        {
            no++;
            var fr = recordsOfCls.First();
            var exportNamespace = fr.Namespace is not null ? $"namespace {fr.Namespace};" : "";
            var builderCodes = recordsOfCls.SelectMany(r =>
            {
                var builder = new ParseRecordToPathHelper(r);
                return builder.BuildPathHelpers();
            });
            var code = $$"""
            // <auto-generated />
            #nullable enable
            #pragma warning disable CS8600
            #pragma warning disable CS8601
            #pragma warning disable CS8602
            #pragma warning disable CS8603
            #pragma warning disable CS8604
            using System;
            using static BlazorPathHelper.BlazorPathHelperUtility;
            
            {{exportNamespace}}
            
            {{fr.AccessModifier}} partial class {{fr.ExportClassName}}
            {
                /// <summary>
                /// Helper class for path building
                /// </summary>
                public static partial class Helper
                {
                    {{string.Join($"{NL}        ", builderCodes)}}
                }
            }
            """;
            context.AddSource($"BPH_{fr.ExportClassName}_{no:D4}_Builder.g.cs", code);
        }
    }

    private static void ExportMenuStructureCode(SourceProductionContext context, List<ParseRecordTreeStructure> treeRecords)
    {
        var no = 0;
        var recordsGroupBy = treeRecords.GroupBy(r => new { r.Record.ExportClassName, r.Record.Namespace });
        foreach (var recordsOfCls in recordsGroupBy)
        {
            no++;
            var fr = recordsOfCls.First().Record;
            var menuCodes = recordsOfCls.Select((t, i) =>
            {
                var builder = new ParseRecordTreeToMenuItems(t);
                return builder.ExportMenuCode(i, 0);
            });
            var exportNamespace = fr.Namespace is not null ? $"namespace {fr.Namespace};" : "";
            var code = $$"""
            // <auto-generated />
            #nullable enable
            #pragma warning disable CS8600
            #pragma warning disable CS8601
            #pragma warning disable CS8602
            #pragma warning disable CS8603
            #pragma warning disable CS8604
            using System;
            using System.Collections.Generic;
            using BlazorPathHelper;
            
            {{exportNamespace}}
            
            {{fr.AccessModifier}} partial class {{fr.ExportClassName}}
            {
                /// <summary>
                /// Generated menu item from path definition (flattened)
                /// </summary>
                public static BlazorPathMenuItem[] MenuItemFlatten => MenuItem.ToFlatten(i => i.Children);
                /// <summary>
                /// Generated menu item from path definition (tree structure)
                /// </summary>
                public static readonly BlazorPathMenuItem[] MenuItem = [
            {{string.Join($",{NL}", menuCodes)}}
                ];
            }
            """;
            context.AddSource($"BPH_{fr.ExportClassName}_{no:D4}_Menu.g.cs", code);
        }
    }

    private static void ExportRazorClassCode(
        SourceProductionContext context, List<ParseRecord> records, ImmutableArray<ParseRazorStructure> structures)
    {
        var no = 0;
        var targetRecords = records.Where(r => r.PageTypeSymbol != null);
        foreach (var record in targetRecords)
        {
            no++;
            var pageType = record.PageTypeSymbol!;
            var builder = new ParseRecordToRazorCls(record);
            var pageClassName = pageType.ToDisplayParts().LastOrDefault().ToString();

            // If the PageTypeSymbol is thought not to exist in the source code
            // In this case, it is assumed that the information is obtained from the Razor side
            // If it does not exist there either, it is probably a typo, so the generation is omitted
            var exportNamespace = "";
            var syntaxReferences = pageType.DeclaringSyntaxReferences;
            if (syntaxReferences.Length == 0)
            {
                var searchRazorInfo = structures.FirstOrDefault(s => s.PageClassName == pageClassName);
                if (searchRazorInfo == null)
                {
                    continue;
                }
                exportNamespace = $"namespace {searchRazorInfo.Namespace};";
            }
            else
            {
                var containedNamespace = pageType?.ContainingNamespace;
                if (containedNamespace?.IsGlobalNamespace != true)
                {
                    exportNamespace = $"namespace {containedNamespace};";
                }
            }

            var parameterCodes = builder.ExportParametersCode();
            var queryCodes = builder.ExportQueryCode();
            var exportCodes = parameterCodes.Concat(queryCodes);
            var code = $$"""
            // <auto-generated />
            #nullable enable
            #pragma warning disable CS8600
            #pragma warning disable CS8601
            #pragma warning disable CS8602
            #pragma warning disable CS8603
            #pragma warning disable CS8604
            using Microsoft.AspNetCore.Components;
            
            {{exportNamespace}}
            
            // @page "{{record.PathRawValue}}"
            [Route("{{record.PathRawValue}}")]
            {{record.AccessModifier}} partial class {{pageClassName}}
            {
                {{string.Join($"{NL}    ", exportCodes)}}
            }
            """;
            context.AddSource($"BPH_{pageClassName}_{no:D4}_RazorClass.g.cs", code);
        }
    }

}



