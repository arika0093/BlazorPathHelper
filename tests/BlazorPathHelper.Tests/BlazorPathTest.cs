using System;
using FluentAssertions;
using Xunit;

// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable InconsistentNaming

namespace BlazorPathHelper.Tests;

[BlazorPath]
internal partial class DefinitionBase
{
    public const string TopPage = "/";

    // sample 
    public const string SampleTop = "/sample";
    public const string SampleSub1 = $"{SampleTop}/sub1";
    public const string SampleSub1C1 = $"{SampleSub1}/child1";
    public const string SampleSub2 = $"{SampleTop}/sub2";
    public const string SampleSub2C1 = $"{SampleSub2}/child1";
    public const string SampleSub2C2 = $"{SampleSub2}/child2";

    public const string SampleSub3 = $"{SampleTop}/sub3";

    // ignore menu parameter
    [BlazorPathItem(Visible = false)]
    public const string SampleSub4 = $"{SampleTop}/sub4";

    // be able customize menu item
    [BlazorPathItem("test5")]
    public const string SampleSub5 = $"{SampleTop}/sub5";

    // multiple root item
    public const string Sample2Top = "/sample2";
    public const string Sample2Sub1 = $"{Sample2Top}/sub1";
    public const string Sample3Top = "/sample3";

    // ... and specify root item
    [BlazorPathItem(Group = TopPage)]
    public const string Sample4ForceRoot = "/sample4/hoge";
    public const string Sample4Child = $"{Sample4ForceRoot}/fuga";
}

public class BlazorPathTest
{
    [Fact]
    public void PathRoutingTest()
    {
        DefinitionBase.Helper.TopPage().Should().Be(DefinitionBase.TopPage);
        DefinitionBase.Helper.SampleTop().Should().Be(DefinitionBase.SampleTop);
        DefinitionBase.Helper.SampleSub1().Should().Be(DefinitionBase.SampleSub1);
        DefinitionBase.Helper.SampleSub1C1().Should().Be(DefinitionBase.SampleSub1C1);
        DefinitionBase.Helper.SampleSub2().Should().Be(DefinitionBase.SampleSub2);
        DefinitionBase.Helper.SampleSub2C1().Should().Be(DefinitionBase.SampleSub2C1);
        DefinitionBase.Helper.SampleSub2C2().Should().Be(DefinitionBase.SampleSub2C2);
        DefinitionBase.Helper.SampleSub3().Should().Be(DefinitionBase.SampleSub3);
        DefinitionBase.Helper.SampleSub4().Should().Be(DefinitionBase.SampleSub4);
    }

    [Fact]
    public void MenuStructureTest()
    {
        var menuStructure = DefinitionBase.MenuItem;
        // menuStructure should be 
        // [
        //   Path = "/",
        //   Path = "/sample", Children = [
        //     Path = "/sample/sub1", Children = [
        //       Path = "/sample/sub1/child1", 
        //     ],
        //     Path = "/sample/sub2", Children = [
        //       Path = "/sample/sub2/child1",
        //       Path = "/sample/sub2/child2", 
        //     ],
        //     Path = "/sample/sub3",
        //     Path = "/sample/sub5", Name="test5", 
        //   ],
        //   Path = "/sample2", Children = [
        //     Path = "/sample2/sub1", 
        //   ],
        //   Path = "/sample3",
        //   Path = "/sample4/hoge", Children = [
        //     Path = "/sample4/hoge/fuga", 
        //   ]
        // ];
        menuStructure.Should().BeEquivalentTo(ExpectedMenu);
    }

    // will be generated by BlazorPathHelper
    private readonly BlazorPathMenuItem[] ExpectedMenu = [
        new(){
            Index = 0, GroupKey = "", GroupIndex = 0, GroupLevel = 0, Name = "TopPage", Path = "/", 
        },
        new(){
            Index = 1, GroupKey = "", GroupIndex = 1, GroupLevel = 0, Name = "SampleTop", Path = "/sample",
            Children = [
                new(){
                    Index = 2, GroupKey = "/sample", GroupIndex = 0, GroupLevel = 1, Name = "SampleSub1",
                    Path = "/sample/sub1", 
                    Children = [
                        new(){
                            Index = 3, GroupKey = "/sample/sub1", GroupIndex = 0, GroupLevel = 2,
                            Name = "SampleSub1C1", Path = "/sample/sub1/child1",  
                        }
                    ]
                },
                new(){
                    Index = 4, GroupKey = "/sample", GroupIndex = 1, GroupLevel = 1, Name = "SampleSub2",
                    Path = "/sample/sub2", 
                    Children = [
                        new(){
                            Index = 5, GroupKey = "/sample/sub2", GroupIndex = 0, GroupLevel = 2,
                            Name = "SampleSub2C1", Path = "/sample/sub2/child1",  
                        },
                        new(){
                            Index = 6, GroupKey = "/sample/sub2", GroupIndex = 1, GroupLevel = 2,
                            Name = "SampleSub2C2", Path = "/sample/sub2/child2",  
                        }
                    ]
                },
                new(){
                    Index = 7, GroupKey = "/sample", GroupIndex = 2, GroupLevel = 1, Name = "SampleSub3",
                    Path = "/sample/sub3",  
                },
                new(){
                    Index = 8, GroupKey = "/sample", GroupIndex = 3, GroupLevel = 1, Name = "test5",
                    Path = "/sample/sub5",  
                }
            ]
        },
        new(){
            Index = 9, GroupKey = "", GroupIndex = 2, GroupLevel = 0, Name = "Sample2Top", Path = "/sample2",
            Children =  [
                new(){
                    Index = 10, GroupKey = "/sample2", GroupIndex = 0, GroupLevel = 1, Name = "Sample2Sub1",
                    Path = "/sample2/sub1",  
                }
            ]
        },
        new(){
            Index = 11, GroupKey = "", GroupIndex = 3, GroupLevel = 0, Name = "Sample3Top", Path = "/sample3",
             
        },
        new(){
            Index = 12, GroupKey = "", GroupIndex = 4, GroupLevel = 0, Name = "Sample4ForceRoot",
            Path = "/sample4/hoge", 
            Children = [
                new(){
                    Index = 13, GroupKey = "/sample4/hoge", GroupIndex = 0, GroupLevel = 1, Name = "Sample4Child",
                    Path = "/sample4/hoge/fuga", 
                }
            ]
        }
    ];
}